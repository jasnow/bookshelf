# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dry-initializer/all/dry-initializer.rbi
#
# dry-initializer-1.4.1
module Dry::Initializer
  def __initializer_builder__(**settings); end
  def __initializer_mixin__; end
  def inherited(klass); end
  def option(*args); end
  def param(*args); end
  extend Dry::Initializer::ClassDSL
end
class Dry::Initializer::DefaultValueError < TypeError
  def initialize(name, value); end
end
class Dry::Initializer::TypeConstraintError < TypeError
  def initialize(name, type); end
end
class Dry::Initializer::ParamsOrderError < RuntimeError
  def initialize(required, optional); end
end
class Dry::Initializer::Attribute
  def ==(other); end
  def coercer; end
  def coercer_hash(type); end
  def default; end
  def default_hash(type); end
  def getter; end
  def initialize(options); end
  def optional; end
  def postsetter; end
  def reader; end
  def reader_definition; end
  def self.dispatchers; end
  def self.new(source, coercer = nil, **options); end
  def self.option(*args); end
  def self.param(*args); end
  def source; end
  def target; end
  def undefined; end
  def validate; end
  def validate_coercer; end
  def validate_default; end
  def validate_target; end
end
class Dry::Initializer::Param < Dry::Initializer::Attribute
  def coercer_hash; end
  def default_hash; end
  def default_part; end
  def fast_setter; end
  def initialize(*args, **options); end
  def initializer_signature; end
  def maybe_coerced; end
  def maybe_default; end
  def presetter; end
  def safe_setter; end
end
class Dry::Initializer::Option < Dry::Initializer::Attribute
  def coercer_hash; end
  def default_hash; end
  def default_part; end
  def dispensable?; end
  def fast_setter; end
  def initializer_signature; end
  def maybe_optional; end
  def presetter; end
  def safe_coerced; end
  def safe_default; end
  def safe_setter; end
end
class Dry::Initializer::Builder
  def attributes; end
  def call(mixin); end
  def clear_method(mixin, name); end
  def code; end
  def coercers; end
  def defaults; end
  def defined_options; end
  def duplications; end
  def getters; end
  def initialize(**config); end
  def initializer_postsetters; end
  def initializer_presetters; end
  def initializer_setters; end
  def initializer_signatures; end
  def insert(collection, new_item); end
  def option(*args, **opts); end
  def param(*args, **opts); end
  def validate_collections; end
end
module Dry::Initializer::InstanceDSL
  def __initialize__(*arg0); end
  def initialize(*args); end
end
module Dry::Initializer::ClassDSL
  def [](**settings); end
  def config; end
  def define(fn = nil, &block); end
  def extended(klass); end
  def mixin(fn = nil, &block); end
end
module Dry
end
