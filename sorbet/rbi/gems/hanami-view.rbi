# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/hanami-view/all/hanami-view.rbi
#
# hanami-view-1.3.1
module Hanami
end
module Hanami::View
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure(&blk); end
  def self.dupe; end
  def self.duplicate(mod, views = nil, &blk); end
  def self.included(base); end
  def self.load!; end
  extend Hanami::Utils::ClassAttribute::ClassMethods
  include Hanami::Utils::ClassAttribute
end
module Hanami::View::Rendering
  def load!; end
  def load_registry!; end
  def registry; end
  def render(context); end
  def self.extended(base); end
end
class Hanami::View::Rendering::NullLayout
  def initialize(scope, rendered); end
  def render; end
end
class Hanami::View::Rendering::LayoutFinder
  def find; end
  def initialize(view); end
  def self.find(layout, namespace = nil); end
end
class Hanami::View::Template
  def format; end
  def initialize(template, encoding = nil); end
  def render(scope, &blk); end
  def slim?(template); end
end
class Hanami::View::Rendering::PartialFile
  def format; end
  def initialize(key, format, template); end
  def key; end
  def template; end
end
class Hanami::View::Rendering::PartialTemplatesFinder
  def _find_partials(path); end
  def configuration; end
  def find; end
  def initialize(configuration); end
end
class Hanami::View::Configuration
  def add_layout(layout); end
  def add_partial(partial); end
  def add_view(view); end
  def copy!(base); end
  def default_encoding(value = nil); end
  def default_encoding=(arg0); end
  def duplicate; end
  def find_partial(relative_partial_path, template_name, format); end
  def initialize; end
  def layout(value = nil); end
  def layout=(arg0); end
  def layouts; end
  def load!; end
  def load_partials!; end
  def load_paths; end
  def load_paths=(arg0); end
  def modules; end
  def modules=(arg0); end
  def namespace(value = nil); end
  def namespace=(arg0); end
  def partials; end
  def prepare(&blk); end
  def reset!; end
  def root(value = nil); end
  def root=(arg0); end
  def self.for(base); end
  def unload!; end
  def views; end
end
module Hanami::View::Inheritable
  def inherited(base); end
  def load!; end
  def subclasses; end
  def views; end
end
class Hanami::View::Rendering::NullTemplate
  def render(scope, locals = nil); end
end
class Hanami::View::Rendering::TemplatesFinder
  def _find(lookup = nil); end
  def engines; end
  def find; end
  def format; end
  def initialize(view); end
  def recursive; end
  def root; end
  def search_path; end
  def separator; end
  def template_name; end
  def templates_path(*parts); end
end
class Hanami::View::Rendering::LayoutRegistry
  def format(context); end
  def initialize(view); end
  def prepare!; end
  def resolve(context); end
  def templates; end
end
class Hanami::View::Rendering::ViewFinder
  def find(template); end
  def initialize(view); end
end
class Hanami::View::Rendering::Registry < Hanami::View::Rendering::LayoutRegistry
  def prepare!; end
  def prepare_templates!; end
  def prepare_views!; end
  def resolve(context); end
  def template_for(view); end
  def view_for(template); end
  def views; end
end
class Hanami::View::Rendering::NullLocal < Hanami::Utils::BasicObject
  def __inspect; end
  def all?; end
  def any?; end
  def empty?; end
  def initialize(local); end
  def method_missing(m, *arg1); end
  def nil?; end
  def respond_to_missing?(method_name, include_all); end
  def to_s; end
  def to_str; end
end
class Hanami::View::Rendering::Options
  def self.build(options, locals, format); end
end
class Hanami::View::Rendering::LayoutScope < BasicObject
  def _options(options); end
  def class; end
  def format; end
  def initialize(layout, scope); end
  def inspect; end
  def layout; end
  def local(key); end
  def locals; end
  def method_missing(m, *args, &blk); end
  def render(options); end
  def renderer(options); end
  def respond_to?(m, include_all = nil); end
  def respond_to_missing?(m, include_all); end
  def view; end
end
class Hanami::View::Rendering::TemplateFinder < Hanami::View::Rendering::TemplatesFinder
  def find; end
  def format; end
  def initialize(view, options); end
  def template_name; end
end
class Hanami::View::Rendering::Template
  def initialize(view, options); end
  def raise_missing_template_error; end
  def render; end
  def scope; end
  def template; end
end
class Hanami::View::Rendering::PartialFinder < Hanami::View::Rendering::TemplateFinder
  def find; end
  def partial_name; end
  def prefix; end
  def relative_partial_path; end
  def template_name; end
  def view_template_dir; end
end
class Hanami::View::Rendering::Partial < Hanami::View::Rendering::Template
  def template; end
end
class Hanami::View::Rendering::Scope < Hanami::View::Rendering::LayoutScope
  def _options(options); end
  def format; end
  def initialize(view, locals = nil); end
  def inspect; end
  def layout; end
  def method_missing(m, *args, &block); end
  def respond_to_missing?(m, include_all); end
end
class Hanami::View::Rendering::Subscope < Hanami::View::Rendering::Scope
  def _options(options); end
  def method_missing(m, *args, &block); end
  def respond_to_missing?(m, _include_all); end
end
module Hanami::View::Rendering::InstanceMethods
  def initialize(template, **locals); end
  def layout; end
  def local(key); end
  def locals; end
  def method_missing(m, *arg1); end
  def render; end
  def rendered; end
  def template; end
end
module Hanami::View::Escape
  def method_added(method_name); end
  def self.extended(base); end
  def self.html(input); end
end
module Hanami::View::Escape::InstanceMethods
  def _escape(object); end
  def _raw(string); end
end
module Hanami::View::Escape::Presentable
  def initialize(object); end
  def method_missing(m, *args, &blk); end
  def respond_to_missing?(m, include_private = nil); end
  def self.included(base); end
end
class Hanami::View::Escape::Presenter
  extend Hanami::View::Escape
  include Hanami::View::Escape::Presentable
end
class Hanami::View::Rendering::TemplateName
  def compile!(namespace); end
  def initialize(name, namespace); end
  def replace!(token); end
  def to_s; end
  def tokens(namespace); end
end
module Hanami::View::Dsl
  def format(value = nil); end
  def layout(value = nil); end
  def load!; end
  def root(value = nil); end
  def template(value = nil); end
end
class Hanami::View::Error < StandardError
end
class Hanami::View::MissingTemplateError < Hanami::View::Error
  def initialize(template, format); end
end
class Hanami::View::MissingFormatError < Hanami::View::Error
end
class Hanami::View::MissingTemplateLayoutError < Hanami::View::Error
  def initialize(template); end
end
class Hanami::View::UnknownRenderTypeError < Hanami::View::Error
  def initialize(known_types, supplied_options); end
end
class Hanami::View::Rendering::NullView
  def render; end
end
module Hanami::Layout
  def initialize(scope, rendered); end
  def local(key); end
  def render; end
  def self.included(base); end
  def template; end
end
module Hanami::Layout::ClassMethods
  def load!; end
  def load_registry!; end
  def registry; end
  def suffix; end
  def template; end
end
module Hanami::Presenter
  def self.included(base); end
end
