# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/http_router/all/http_router.rbi
#
# http_router-0.11.2
class HttpRouter
  def add(*args, &app); end
  def add_route(route); end
  def add_with_request_method(path, method, opts = nil, &app); end
  def call(env, &callback); end
  def clone(klass = nil); end
  def compile; end
  def compiling_call(env, &callback); end
  def compiling_path(route, *args); end
  def compiling_url(route, *args); end
  def compiling_url_ns(route, *args); end
  def default(app); end
  def default_app; end
  def default_app=(arg0); end
  def default_host; end
  def default_host=(arg0); end
  def default_port; end
  def default_port=(arg0); end
  def default_scheme; end
  def default_scheme=(arg0); end
  def delete(path, opts = nil, &app); end
  def extend_route(&blk); end
  def get(path, opts = nil, &app); end
  def head(path, opts = nil, &app); end
  def ignore_trailing_slash?; end
  def initialize(*args, &blk); end
  def inspect; end
  def link(path, opts = nil, &app); end
  def named_routes; end
  def no_response(request, env); end
  def nodes; end
  def options(path, opts = nil, &app); end
  def pass_on_response(response); end
  def patch(path, opts = nil, &app); end
  def path(route, *args); end
  def post(path, opts = nil, &app); end
  def process_destination_path(path, env); end
  def put(path, opts = nil, &app); end
  def raw_call(env, &blk); end
  def raw_path(route, *args); end
  def raw_url(route, *args); end
  def raw_url_ns(route, *args); end
  def recognize(env, &callback); end
  def redirect_trailing_slash?; end
  def reset!; end
  def rewrite_partial_path_info(env, request); end
  def rewrite_path_info(env, request); end
  def root; end
  def route_class; end
  def route_class=(arg0); end
  def routes; end
  def to_s; end
  def trace(path, opts = nil, &app); end
  def uncompile; end
  def unlink(path, opts = nil, &app); end
  def url(route, *args); end
  def url_mount; end
  def url_mount=(arg0); end
  def url_ns(route, *args); end
end
class HttpRouter::Node
  def add(matcher); end
  def add_destination(route, path, param_names = nil); end
  def add_free_match(regexp); end
  def add_glob; end
  def add_glob_regexp(matcher); end
  def add_host(hosts); end
  def add_lookup(part); end
  def add_match(regexp, matching_indicies = nil, splitting_indicies = nil); end
  def add_request_method(rm); end
  def add_scheme(scheme); end
  def add_spanning_match(regexp, matching_indicies = nil, splitting_indicies = nil); end
  def add_user_agent(uas); end
  def add_variable; end
  def depth; end
  def initialize(router, parent, matchers = nil); end
  def inject_root_ivar(obj); end
  def inject_root_methods(code = nil, &blk); end
  def inspect; end
  def inspect_label; end
  def inspect_matchers_body; end
  def root; end
  def router; end
  def to_code; end
  def usable?(other); end
  def use_named_captures?; end
end
class HttpRouter::Request
  def acceptable_methods; end
  def called; end
  def called=(arg0); end
  def called?; end
  def continue; end
  def continue=(arg0); end
  def extra_env; end
  def extra_env=(arg0); end
  def initialize(path, rack_request); end
  def joined_path; end
  def params; end
  def params=(arg0); end
  def passed_with; end
  def passed_with=(arg0); end
  def path; end
  def path=(arg0); end
  def path_finished?; end
  def rack; end
  def rack_request; end
  def rack_request=(arg0); end
  def to_s; end
end
class Anonymous_Struct_22 < Struct
  def path; end
  def path=(_); end
  def request; end
  def request=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class HttpRouter::Response < Anonymous_Struct_22
  def initialize(request, path); end
  def param_values; end
  def params; end
  def route; end
end
class HttpRouter::Route
  def create_clone(new_router); end
  def default_values; end
  def dest; end
  def dest=(arg0); end
  def generator; end
  def generator=(arg0); end
  def host; end
  def host=(arg0); end
  def ignore_trailing_slash; end
  def ignore_trailing_slash=(arg0); end
  def match_partially; end
  def match_partially=(arg0); end
  def matches_with(var_name); end
  def name; end
  def name=(name); end
  def original_path; end
  def original_path=(arg0); end
  def other_hosts; end
  def path_for_generation; end
  def path_for_generation=(arg0); end
  def path_validation_regex; end
  def path_validation_regex=(arg0); end
  def paths; end
  def request_methods; end
  def router; end
  def router=(arg0); end
  def scheme; end
  def scheme=(arg0); end
  def to_s; end
  def user_agent; end
  def user_agent=(arg0); end
end
class HttpRouter::Generator
  def append_querystring(uri, params); end
  def append_querystring_value(uri, key, value); end
  def each_path; end
  def initialize(route, paths); end
  def matching_path(params, other_hash = nil); end
  def max_param_count; end
  def param_names; end
  def path(*args); end
  def path_args_processing(args); end
  def path_with_params(*a); end
  def scheme_port; end
  def url(*args); end
  def url_ns(*args); end
end
class HttpRouter::Generator::PathGenerator
  def initialize(route, path, validation_regex = nil); end
  def param_names; end
  def param_names=(arg0); end
  def path; end
end
module HttpRouter::RouteHelper
  def add_default_values(hash); end
  def add_match_with(matchers); end
  def add_other_host(hosts); end
  def add_path(path); end
  def add_request_method(methods); end
  def delete; end
  def get; end
  def head; end
  def link; end
  def name(name = nil); end
  def options; end
  def patch; end
  def path; end
  def path=(path); end
  def post; end
  def process_opts(opts); end
  def put; end
  def redirect(path, status = nil); end
  def static(root); end
  def to(dest = nil, &dest_block); end
  def trace; end
  def unlink; end
end
module HttpRouter::GenerationHelper
  def max_param_count; end
  def param_names; end
  def path(*args); end
  def url(*args); end
  def url_ns(*args); end
end
module HttpRouter::RegexRouteGeneration
  def url_with_params(*a); end
end
module HttpRouter::Util
end
class HttpRouter::InvalidRouteException < RuntimeError
end
class HttpRouter::MissingParameterException < RuntimeError
end
class HttpRouter::InvalidRequestValueError < RuntimeError
end
class HttpRouter::TooManyParametersException < RuntimeError
end
class HttpRouter::LeftOverOptions < RuntimeError
end
class HttpRouter::AmbiguousVariableException < RuntimeError
end
class HttpRouter::RecognizeResponse < Struct
  def acceptable_methods; end
  def acceptable_methods=(_); end
  def matches; end
  def matches=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class HttpRouter::Node::Path < HttpRouter::Node
  def duplicates; end
  def dynamic; end
  def dynamic?; end
  def hashify_params(params); end
  def initialize(router, parent, route, path, param_names = nil); end
  def inspect_label; end
  def param_names; end
  def path; end
  def route; end
  def to_code; end
  def usable?(other); end
end
class HttpRouter::Node::Root < HttpRouter::Node
  def add_complex_part(route, node, parts, path_generator); end
  def add_non_path_to_tree(route, node, path, param_names); end
  def add_normal_part(route, node, part, path_generator); end
  def add_route(route); end
  def compile(routes); end
  def compiled; end
  def compiled?; end
  def depth; end
  def initialize(router); end
  def inject_root_ivar(obj); end
  def inspect_label; end
  def methods_module; end
  def next_counter; end
  def uncompile; end
end
