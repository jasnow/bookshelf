# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rom-repository/all/rom-repository.rbi
#
# rom-repository-1.4.0
module ROM
end
class ROM::Repository
  def changeset(*args); end
  def command(*args, **opts, &block); end
  def command_compiler; end
  def commands; end
  def compile_command(*args, mapper: nil, use: nil, **opts); end
  def initialize(container, opts = nil); end
  def inspect; end
  def map_tuple(relation, tuple); end
  def mappers; end
  def relations; end
  def session(&block); end
  def transaction(&block); end
  extend Anonymous_Module_82
  extend Anonymous_Module_83
  extend Anonymous_Module_84
  extend Dry::Core::ClassAttributes
  extend ROM::Initializer
  extend ROM::Repository::ClassInterface
  include Anonymous_Module_81
  include Dry::Initializer::InstanceDSL
  include ROM::Initializer::InstanceMethods
end
module ROM::Repository::ClassInterface
  def [](name); end
  def commands(*names, mapper: nil, use: nil, **opts); end
  def define_command_method(type, **opts); end
  def define_restricted_command_method(type, views, **opts); end
  def inherited(klass); end
  def relations(*names); end
end
module Anonymous_Dry_Equalizer_85
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
class ROM::Struct < Dry::Struct
  def fetch(name); end
  def method_missing(method, *arg1); end
  def respond_to_missing?(*arg0); end
  def to_s; end
  include Anonymous_Dry_Equalizer_85
  include Dry::Equalizer::Methods
end
class ROM::Struct::MissingAttribute < NameError
end
class ROM::OpenStruct
  def initialize(attributes); end
  def method_missing(meth, *args, &block); end
  def respond_to_missing?(meth, include_private = nil); end
end
class ROM::Repository::StructBuilder
  def [](*args); end
  def build_class(name, parent, &block); end
  def call(*args); end
  def class_name(name); end
  def initialize(namespace = nil); end
  def namespace; end
  def visit(ast); end
  def visit_attribute(attr); end
  def visit_header(node); end
  def visit_relation(node); end
  extend Dry::Core::Cache
  include Dry::Core::Cache::Methods
end
class ROM::Repository::HeaderBuilder
  def [](ast); end
  def call(ast); end
  def initialize(struct_namespace: nil, **options); end
  def struct_builder; end
  def visit(node); end
  def visit_attribute(attr); end
  def visit_header(node); end
  def visit_relation(node); end
end
class ROM::Repository::MapperBuilder
  def [](ast); end
  def call(ast); end
  def header_builder; end
  def initialize(options = nil); end
  extend Dry::Core::Cache
  include Dry::Core::Cache::Methods
end
class ROM::Repository::RelationProxy
  def __new__(relation, new_options = nil); end
  def adapter; end
  def as(*names, **opts); end
  def base_name; end
  def call(*args); end
  def combine?; end
  def combine_children(*args, &block); end
  def combine_children_without_deprecation(options); end
  def combine_parents(*args, &block); end
  def combine_parents_without_deprecation(options); end
  def composite?; end
  def inspect; end
  def map_to(model); end
  def map_with(*names, **opts); end
  def mapper; end
  def method_missing(meth, *args, &block); end
  def name; end
  def node(name, &block); end
  def nodes; end
  def nodes_ast; end
  def respond_to_missing?(meth, _include_private = nil); end
  def schema; end
  def to_ast; end
  def with(new_options); end
  def wrap_parent(*args, &block); end
  def wrap_parent_without_deprecation(options); end
  def wraps; end
  def wraps_ast; end
  extend Anonymous_Dry_Core_Deprecations_Tagged_88
  extend Anonymous_Module_87
  extend Dry::Core::Deprecations::Interface
  extend ROM::Initializer
  include Anonymous_Module_86
  include Dry::Initializer::InstanceDSL
  include ROM::Initializer::InstanceMethods
  include ROM::Relation::Materializable
  include ROM::Repository::RelationProxy::Combine
  include ROM::Repository::RelationProxy::Wrap
end
module ROM::Repository::RelationProxy::Combine
  def combine(*args); end
  def combine_children(options); end
  def combine_from_assoc(name, other, &fallback); end
  def combine_from_assoc_with_fallback(name, other, keys); end
  def combine_keys(source, target, type); end
  def combine_method(other, keys); end
  def combine_opts_for_assoc(name, opts = nil); end
  def combine_opts_from_relations(*relations); end
  def combine_parents(options); end
  def combine_tuple_key(result); end
  def combined(name, keys, type); end
  def infer_combine_keys(source, target, type); end
end
module ROM::Repository::RelationProxy::Wrap
  def wrap(*names, **options); end
  def wrap_parent(options); end
  def wrapped(name, keys, wrap_from_assoc = nil); end
  def wraps_from_names(names); end
  def wraps_from_options(options); end
end
module Anonymous_Module_87
  extend Dry::Initializer::ClassDSL
  include Dry::Initializer
end
module Anonymous_Module_86
  def __coercers__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def auto_struct; end
  def mappers; end
  def meta; end
  def name; end
  def registry; end
  def relation; end
end
module Anonymous_Dry_Core_Deprecations_Tagged_88
end
class ROM::Repository::CommandProxy
  def >>(other); end
  def call(input); end
  def command; end
  def initialize(command); end
  def root; end
end
class ROM::Repository::CommandCompiler
  def adapter; end
  def container; end
  def finalize_command_class(klass, relation); end
  def id; end
  def initialize(id, adapter, container, registry, plugins, options); end
  def options; end
  def plugins; end
  def register_command(rel_name, type, meta, parent_relation = nil); end
  def registry; end
  def result; end
  def self.[](*args); end
  def self.registry; end
  def setup_associates(klass, relation, meta, parent_relation); end
  def type; end
  def visit(ast, *args); end
  def visit_attribute(*args); end
  def visit_header(node, *args); end
  def visit_relation(node, parent_relation = nil); end
  extend Dry::Core::Cache
  include Dry::Core::Cache::Methods
end
class ROM::Changeset
  def command; end
  def commit; end
  def inspect; end
  def new(relation, new_options = nil); end
  def relation_identifier; end
  def self.[](relation_name); end
  def with(new_options); end
  extend Anonymous_Module_90
  extend Anonymous_Module_91
  extend Anonymous_Module_92
  extend Dry::Core::Cache
  extend Dry::Core::ClassAttributes
  extend ROM::Initializer
  include Anonymous_Module_89
  include Dry::Core::Cache::Methods
  include Dry::Initializer::InstanceDSL
  include ROM::Initializer::InstanceMethods
end
module ROM::Changeset::PipeRegistry
  def self.add_timestamps(data); end
  def self.touch(data); end
  extend Transproc::Registry
end
class Anonymous_Transproc_Transformer_93 < Transproc::Transformer
end
class ROM::Changeset::Pipe < Anonymous_Transproc_Transformer_93
  def >>(other, use_for_diff: nil); end
  def [](name); end
  def bind(context); end
  def bind_processor(processor, context); end
  def call(data); end
  def compose(other, use_for_diff: nil); end
  def for_diff(data); end
  def new(processor, opts = nil); end
  def self.[](name); end
  def with(opts); end
  extend Anonymous_Module_95
  extend ROM::Initializer
  include Anonymous_Module_94
  include Dry::Initializer::InstanceDSL
  include ROM::Initializer::InstanceMethods
end
module Anonymous_Module_95
  extend Dry::Initializer::ClassDSL
  include Dry::Initializer
end
module Anonymous_Module_94
  def __coercers__; end
  def __defaults__; end
  def __initialize__(processor = nil, **__options__); end
  def diff_processor; end
  def processor; end
  def use_for_diff; end
end
module Anonymous_Module_96
  def __coercers__; end
  def __data__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def command_compiler; end
  def command_type; end
  def relation; end
end
class ROM::Changeset::Stateful < ROM::Changeset
  def associate(other, name = nil); end
  def command; end
  def commit; end
  def data(data); end
  def extend(*steps, use_for_diff: nil, **opts, &block); end
  def inspect; end
  def map(*steps, &block); end
  def method_missing(meth, *args, &block); end
  def pipe; end
  def respond_to_missing?(meth, include_private = nil); end
  def result; end
  def self.default_pipe(context); end
  def self.extend(*arg0, &block); end
  def self.inherited(klass); end
  def self.map(options = nil, &block); end
  def self.pipes; end
  def to_a; end
  def to_ary; end
  def to_h; end
  def to_hash; end
  include Anonymous_Module_96
end
class ROM::Changeset::Associated
  def associate(other, name = nil); end
  def command; end
  def commit; end
  def relation; end
  def self.infer_assoc_name(other); end
  extend Anonymous_Module_98
  extend ROM::Initializer
  include Anonymous_Module_97
  include Dry::Initializer::InstanceDSL
  include ROM::Initializer::InstanceMethods
end
module Anonymous_Module_98
  extend Dry::Initializer::ClassDSL
  include Dry::Initializer
end
module Anonymous_Module_97
  def __coercers__; end
  def __defaults__; end
  def __initialize__(left, **__options__); end
  def associations; end
  def left; end
end
module Anonymous_Module_99
  def __coercers__; end
  def __data__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def command_compiler; end
  def command_type; end
  def relation; end
end
class ROM::Changeset::Create < ROM::Changeset::Stateful
  def command; end
  include Anonymous_Module_99
end
module ROM::Changeset::Restricted
  def by_pk(pk, data = nil); end
  def command; end
end
module Anonymous_Module_100
  def __coercers__; end
  def __data__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def command_compiler; end
  def command_type; end
  def relation; end
end
class ROM::Changeset::Update < ROM::Changeset::Stateful
  def clean?; end
  def commit; end
  def diff; end
  def diff?; end
  def original; end
  include Anonymous_Module_100
  include ROM::Changeset::Restricted
end
module Anonymous_Module_101
  def __coercers__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def command_compiler; end
  def command_type; end
  def relation; end
end
class ROM::Changeset::Delete < ROM::Changeset
  include Anonymous_Module_101
  include ROM::Changeset::Restricted
end
module Anonymous_Module_90
  extend Dry::Initializer::ClassDSL
  include Dry::Initializer
end
module Anonymous_Module_89
  def __coercers__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def command_compiler; end
  def command_type; end
  def relation; end
end
module Anonymous_Module_91
  def command_type(value = nil); end
  def inherited(klass); end
end
module Anonymous_Module_92
  def inherited(klass); end
  def relation(value = nil); end
end
class ROM::Session
  def add(changeset); end
  def commit!; end
  def failure?; end
  def initialize(repo); end
  def initialize_queue!; end
  def pending?; end
  def queue; end
  def repo; end
  def status; end
  def success?; end
  include Anonymous_Dry_Equalizer_102
  include Dry::Equalizer::Methods
end
module Anonymous_Dry_Equalizer_102
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
module Anonymous_Module_103
  def __coercers__; end
  def __defaults__; end
  def __initialize__(container, **__options__); end
  def auto_struct; end
  def container; end
  def struct_namespace; end
end
class ROM::Repository::Root < ROM::Repository
  def aggregate(*args); end
  def changeset(*args); end
  def initialize(container, opts = nil); end
  def root; end
  def self.inherited(klass); end
  extend Anonymous_Module_104
  include Anonymous_Module_103
end
module Anonymous_Module_104
  def inherited(klass); end
  def root(value = nil); end
end
module Anonymous_Module_82
  extend Dry::Initializer::ClassDSL
  include Dry::Initializer
end
module Anonymous_Module_81
  def __coercers__; end
  def __defaults__; end
  def __initialize__(container, **__options__); end
  def auto_struct; end
  def container; end
  def struct_namespace; end
end
module Anonymous_Module_83
  def auto_struct(value = nil); end
  def inherited(klass); end
end
module Anonymous_Module_84
  def inherited(klass); end
  def struct_namespace(value = nil); end
end
