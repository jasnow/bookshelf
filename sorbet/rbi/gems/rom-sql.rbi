# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rom-sql/all/rom-sql.rbi
#
# rom-sql-1.3.5
module ROM
end
module ROM::SQL
  def self.current_gateway; end
  def self.current_gateway=(arg0); end
  def self.migration(*args, &block); end
  def self.with_gateway(gateway); end
  extend Dry::Core::Extensions
end
class ROM::SQL::Error < StandardError
  def initialize(original_exception); end
  def original_exception; end
end
class ROM::SQL::MissingConfigurationError < StandardError
end
class ROM::SQL::NoAssociationError < StandardError
end
class ROM::SQL::DatabaseError < ROM::SQL::Error
end
class ROM::SQL::ConstraintError < ROM::SQL::Error
end
class ROM::SQL::NotNullConstraintError < ROM::SQL::ConstraintError
end
class ROM::SQL::UniqueConstraintError < ROM::SQL::ConstraintError
end
class ROM::SQL::ForeignKeyConstraintError < ROM::SQL::ConstraintError
end
class ROM::SQL::CheckConstraintError < ROM::SQL::ConstraintError
end
class ROM::SQL::UnknownDBTypeError < StandardError
end
class ROM::SQL::MissingPrimaryKeyError < StandardError
end
module ROM::Plugins
end
module ROM::Plugins::Relation
end
module ROM::Plugins::Relation::SQL
end
module ROM::Plugins::Relation::SQL::Instrumentation
  def self.included(klass); end
end
module ROM::Plugins::Relation::SQL::AutoRestrictions
  def self.included(klass); end
  def self.restriction_methods(schema); end
end
class ROM::Plugins::Relation::SQL::AutoRestrictions::EmptySchemaError < ArgumentError
  def initialize(klass); end
end
module ROM::SQL::Plugin
end
module ROM::SQL::Plugin::Associates
  def self.included(klass); end
end
class ROM::SQL::Plugin::Associates::MissingJoinKeysError < StandardError
  def initialize(command, assoc_name); end
  def tokens(command, assoc_name); end
end
class ROM::SQL::Plugin::Associates::AssociateOptions
  def after?; end
  def assoc; end
  def ensure_valid(command); end
  def initialize(name, relation, opts); end
  def name; end
  def opts; end
  def to_hash; end
end
module ROM::SQL::Plugin::Associates::ClassMethods
  def associates(name, options = nil); end
  def build(relation, options = nil); end
end
module ROM::SQL::Plugin::Associates::InstanceMethods
  def __registry__; end
  def associate(tuples, curried_parent = nil, assoc:, keys:, parent: nil); end
  def with_association(name, opts = nil); end
end
module ROM::SQL::Plugin::Pagination
  def page(num); end
  def per_page(num); end
  def self.included(klass); end
end
class ROM::SQL::Plugin::Pagination::Pager
  def at(dataset, current_page, per_page = nil); end
  def limit_value; end
  def next_page; end
  def prev_page; end
  def total; end
  def total_pages; end
  extend Anonymous_Module_113
  extend ROM::Initializer
  include Anonymous_Dry_Equalizer_114
  include Anonymous_Module_112
  include Dry::Equalizer::Methods
  include Dry::Initializer::InstanceDSL
  include ROM::Initializer::InstanceMethods
end
module Anonymous_Module_113
  extend Dry::Initializer::ClassDSL
  include Dry::Initializer
end
module Anonymous_Module_112
  def __coercers__; end
  def __defaults__; end
  def __initialize__(dataset, **__options__); end
  def current_page; end
  def dataset; end
  def per_page; end
end
module Anonymous_Dry_Equalizer_114
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
module ROM::SQL::Plugin::Timestamps
  def self.included(klass); end
end
module ROM::SQL::Plugin::Timestamps::ClassInterface
  def datestamp(*args); end
  def datestamps(*args); end
  def self.extended(klass); end
  def timestamp(*args); end
  def timestamps(*args); end
end
module ROM::SQL::Plugin::Timestamps::InstanceMethods
  def build_timestamps; end
  def datestamp_columns; end
  def self.included(base); end
  def set_timestamps(tuples, *arg1); end
  def timestamp_columns; end
end
module ROM::SQL::Types
  def self.Constructor(*args, &block); end
  def self.Definition(*args, &block); end
  extend ROM::Types::Methods
  include ROM::Types
end
class ROM::SQL::DSL < BasicObject
  def call(&block); end
  def initialize(schema); end
  def respond_to_missing?(name, include_private = nil); end
  def schema; end
  def type(identifier); end
  def types; end
end
class ROM::SQL::OrderDSL < ROM::SQL::DSL
  def method_missing(meth, *args, &block); end
end
class ROM::SQL::GroupDSL < ROM::SQL::DSL
  def method_missing(meth, *args, &block); end
end
module Anonymous_Module_115
  def __coercers__; end
  def __defaults__; end
  def __initialize__(type, __options__ = nil); end
  def type; end
end
class ROM::SQL::Function < ROM::Schema::Attribute
  def cast(expr, db_type); end
  def func; end
  def is(other); end
  def method_missing(meth, *args); end
  def name; end
  def qualified; end
  def sql_literal(ds); end
  include Anonymous_Module_115
end
class ROM::SQL::ProjectionDSL < ROM::SQL::DSL
  def `(value); end
  def method_missing(meth, *args, &block); end
  def respond_to_missing?(name, include_private = nil); end
end
class ROM::SQL::RestrictionDSL < ROM::SQL::DSL
  def call(&block); end
  def exists(relation); end
  def method_missing(meth, *args, &block); end
end
module Anonymous_Module_116
  def __coercers__; end
  def __defaults__; end
  def __initialize__(type, **__options__); end
  def extensions; end
  def type; end
end
class ROM::SQL::Attribute < ROM::Schema::Attribute
  def !; end
  def =~(other); end
  def __cmp__(op, other); end
  def aliased(name); end
  def as(name); end
  def binary_operation_arg(value); end
  def canonical; end
  def concat(other, sep = nil); end
  def foreign_key; end
  def func(&block); end
  def in(*args); end
  def is(other); end
  def joined; end
  def joined?; end
  def method_missing(meth, *args, &block); end
  def not(other); end
  def qualified; end
  def qualified?; end
  def self.[](*args); end
  def sql_expr; end
  def sql_literal(ds); end
  def to_sql_name; end
  def to_sym; end
  extend Dry::Core::Cache
  include Anonymous_Module_116
  include Dry::Core::Cache::Methods
end
class ROM::SQL::Attribute::QualifyError < StandardError
end
module ROM::SQL::Attribute::TypeExtensions
  def self.[](wrapped); end
  def self.register(type, &block); end
end
class ROM::SQL::Schema < ROM::Schema
  def call(relation); end
  def canonical; end
  def empty; end
  def finalize!(*args); end
  def group(&block); end
  def initialize(*arg0); end
  def initialize_primary_key_names; end
  def join(other); end
  def joined; end
  def order(&block); end
  def primary_key_name; end
  def primary_key_names; end
  def project(*names, &block); end
  def project_fk(mapping); end
  def project_pk; end
  def qualified; end
  def restriction(&block); end
end
class ROM::SQL::Schema::Inferrer
  def build_fk(columns:, table:, **rest); end
  def build_type(primary_key:, db_type:, type:, allow_null:, foreign_key:, indexes:, **rest); end
  def call(source, gateway); end
  def column_indexes(indexes, column); end
  def filter_columns(schema); end
  def fks_for(gateway, dataset); end
  def indexes_for(gateway, dataset); end
  def map_decimal_type(type); end
  def map_pk_type(_ruby_type, _db_type); end
  def map_type(ruby_type, db_type, **kw); end
  def self.[](type); end
  def self.get(type); end
  def self.inherited(klass); end
  def self.on_error(relation, e); end
  extend Anonymous_Module_117
  extend Dry::Core::ClassAttributes
end
module Anonymous_Module_117
  def db_registry(value = nil); end
  def db_type(value = nil); end
  def inherited(klass); end
  def numeric_pk_type(value = nil); end
  def ruby_type_mapping(value = nil); end
end
class ROM::SQL::QualifiedAttribute
  def attribute; end
  def dataset; end
  def initialize(dataset, attribute); end
  def self.[](*args); end
  def sql_literal_append(ds, sql); end
  def to_sym; end
  extend Dry::Core::Cache
  include Anonymous_Dry_Equalizer_118
  include Dry::Core::Cache::Methods
  include Dry::Equalizer::Methods
end
module Anonymous_Dry_Equalizer_118
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
class ROM::SQL::Association
  def apply_view(schema, relation); end
  def join(relations, type, source = nil, target = nil); end
  def join_key_map(relations); end
  def name; end
  def qualify(name, attribute); end
  def self.new(source, target, options = nil); end
  def self_ref?; end
  extend Anonymous_Module_121
  extend Anonymous_Module_122
  extend Dry::Core::ClassAttributes
  extend ROM::Initializer
  include Anonymous_Dry_Equalizer_119
  include Anonymous_Module_120
  include Dry::Core::Constants
  include Dry::Equalizer::Methods
  include Dry::Initializer::InstanceDSL
  include ROM::Initializer::InstanceMethods
end
class ROM::SQL::Association::Name
  def aliased?; end
  def as(aliaz); end
  def dataset; end
  def initialize(relation_name, aliaz); end
  def inspect; end
  def key; end
  def relation; end
  def relation_name; end
  def self.[](*args); end
  def sql_literal(ds); end
  def to_s; end
  def to_sym; end
  extend Dry::Core::Cache
  include Anonymous_Dry_Equalizer_123
  include Dry::Core::Cache::Methods
  include Dry::Equalizer::Methods
end
module Anonymous_Dry_Equalizer_123
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
module Anonymous_Module_124
  def __coercers__; end
  def __defaults__; end
  def __initialize__(source, target, **__options__); end
  def as; end
  def foreign_key; end
  def relation; end
  def result; end
  def source; end
  def target; end
  def view; end
end
class ROM::SQL::Association::OneToMany < ROM::SQL::Association
  def associate(relations, child, parent); end
  def call(relations, right = nil); end
  def combine_keys(relations); end
  def join_keys(relations); end
  def source_alias; end
  def source_table; end
  def with_keys(relations, &block); end
  include Anonymous_Module_124
end
module Anonymous_Module_125
  def __coercers__; end
  def __defaults__; end
  def __initialize__(source, target, **__options__); end
  def as; end
  def foreign_key; end
  def relation; end
  def result; end
  def source; end
  def target; end
  def view; end
end
class ROM::SQL::Association::OneToOne < ROM::SQL::Association::OneToMany
  include Anonymous_Module_125
end
module Anonymous_Module_126
  def __coercers__; end
  def __defaults__; end
  def __initialize__(source, target, **__options__); end
  def as; end
  def foreign_key; end
  def relation; end
  def result; end
  def source; end
  def target; end
  def through; end
  def view; end
end
class ROM::SQL::Association::ManyToMany < ROM::SQL::Association
  def associate(relations, children, parent); end
  def call(relations, target_rel = nil); end
  def combine_keys(relations); end
  def initialize(*arg0); end
  def join(relations, type, source = nil, target = nil); end
  def join_key_map(relations); end
  def join_keys(relations); end
  def join_relation(relations); end
  def parent_combine_keys(relations); end
  def persist(relations, children, parents); end
  def with_keys(relations, &block); end
  include Anonymous_Module_126
end
module Anonymous_Module_127
  def __coercers__; end
  def __defaults__; end
  def __initialize__(source, target, **__options__); end
  def as; end
  def foreign_key; end
  def relation; end
  def result; end
  def source; end
  def target; end
  def view; end
end
class ROM::SQL::Association::ManyToOne < ROM::SQL::Association
  def associate(relations, child, parent); end
  def call(relations, left = nil); end
  def combine_keys(relations); end
  def join_keys(relations); end
  def source_alias; end
  def source_table; end
  def with_keys(relations, &block); end
  include Anonymous_Module_127
end
module Anonymous_Module_128
  def __coercers__; end
  def __defaults__; end
  def __initialize__(source, target, **__options__); end
  def as; end
  def foreign_key; end
  def relation; end
  def result; end
  def source; end
  def target; end
  def through; end
  def view; end
end
class ROM::SQL::Association::OneToOneThrough < ROM::SQL::Association::ManyToMany
  include Anonymous_Module_128
end
module Anonymous_Dry_Equalizer_119
  def cmp?(comparator, other); end
  def hash; end
  def inspect; end
end
module Anonymous_Module_121
  extend Dry::Initializer::ClassDSL
  include Dry::Initializer
end
module Anonymous_Module_120
  def __coercers__; end
  def __defaults__; end
  def __initialize__(source, target, **__options__); end
  def as; end
  def foreign_key; end
  def relation; end
  def result; end
  def source; end
  def target; end
  def view; end
end
module Anonymous_Module_122
  def inherited(klass); end
  def result(value = nil); end
end
class ROM::SQL::Schema::AssociationsDSL < BasicObject
  def add(association); end
  def belongs_to(name, options = nil); end
  def call; end
  def dataset_name(name); end
  def has_many(target, options = nil); end
  def has_one(name, options = nil); end
  def initialize(source, &block); end
  def many_to_many(target, options = nil); end
  def many_to_one(target, options = nil); end
  def one_to_many(target, options = nil); end
  def one_to_one(target, options = nil); end
  def one_to_one_through(target, options = nil); end
  def registry; end
  def source; end
end
class ROM::SQL::Schema::DSL < ROM::Schema::DSL
  def associations(&block); end
  def associations_dsl; end
  def call; end
  def opts; end
end
module Anonymous_Module_129
  def __coercers__; end
  def __defaults__; end
  def __initialize__(dataset, **__options__); end
  def dataset; end
  def input_schema; end
  def mappers; end
  def output_schema; end
  def primary_key; end
  def schema; end
end
class ROM::SQL::Relation < ROM::Relation
  def assoc(name); end
  def columns; end
  def self.associations; end
  def self.define_default_views!; end
  def self.inherited(klass); end
  def self.primary_key_columns(db, table); end
  extend Anonymous_Module_130
  extend ROM::Plugins::Relation::SQL::AutoCombine::ClassInterface
  extend ROM::Plugins::Relation::SQL::AutoWrap::ClassInterface
  include Anonymous_Module_129
  include ROM::Plugins::Relation::KeyInference
  include ROM::Plugins::Relation::SQL::AutoCombine
  include ROM::Plugins::Relation::SQL::AutoCombine::InstanceInterface
  include ROM::Plugins::Relation::SQL::AutoWrap
  include ROM::Plugins::Relation::SQL::AutoWrap::InstanceInterface
  include ROM::SQL
  include ROM::SQL::Relation::Reading
  include ROM::SQL::Relation::Writing
end
module Anonymous_Module_130
  def adapter(value = nil); end
  def inherited(klass); end
end
module ROM::SQL::Relation::Reading
  def __join__(type, other, join_cond = nil, opts = nil, &block); end
  def avg(*args); end
  def coerce_conditions(conditions); end
  def count; end
  def distinct(*args, &block); end
  def exclude(*args, &block); end
  def exist?(*args, &block); end
  def fetch(pk); end
  def first; end
  def group(*args, &block); end
  def group_and_count(*args, &block); end
  def group_append(*args, &block); end
  def having(*args, &block); end
  def inner_join(*args, &block); end
  def invert; end
  def join(*args, &block); end
  def last; end
  def left_join(*args, &block); end
  def limit(*args); end
  def lock(options = nil, &block); end
  def lock_clause(mode: nil, skip_locked: nil, of: nil, wait: nil); end
  def map(key = nil, &block); end
  def max(*args); end
  def min(*args); end
  def offset(num); end
  def order(*args, &block); end
  def pluck(name); end
  def prefix(name = nil); end
  def project(*args, &block); end
  def qualified; end
  def qualified_columns; end
  def read(sql); end
  def rename(options); end
  def reverse(*args, &block); end
  def right_join(*args, &block); end
  def select(*args, &block); end
  def select_append(*args, &block); end
  def select_group(*args, &block); end
  def sum(*args); end
  def union(relation, options = nil, &block); end
  def unique?(criteria); end
  def where(*args, &block); end
end
module ROM::SQL::Relation::Writing
  def delete(*args, &block); end
  def insert(*args, &block); end
  def multi_insert(*args, &block); end
  def update(*args, &block); end
  def upsert(*args, &block); end
end
module ROM::SQL::SequelAPI
  def group(*args, &block); end
  def having(*args, &block); end
  def inner_join(*args, &block); end
  def left_join(*args, &block); end
  def order(*args, &block); end
  def select(*args, &block); end
  def select_append(*args, &block); end
  def where(*args, &block); end
end
module ROM::Plugins::Relation::SQL::AutoCombine
  def self.included(klass); end
end
module ROM::Plugins::Relation::SQL::AutoCombine::ClassInterface
  def inherited(klass); end
end
module ROM::Plugins::Relation::SQL::AutoCombine::InstanceInterface
  def for_combine(spec); end
  def preload(spec, source); end
end
module ROM::Plugins::Relation::SQL::AutoWrap
  def self.included(klass); end
end
module ROM::Plugins::Relation::SQL::AutoWrap::ClassInterface
  def inherited(klass); end
end
module ROM::Plugins::Relation::SQL::AutoWrap::InstanceInterface
  def for_wrap(keys, name); end
end
module ROM::SQL::Migration
  def initialize(uri, options = nil); end
  def migration(&block); end
  def migrator; end
  def pending_migrations?; end
  def run_migrations(options = nil); end
  def self.included(base); end
end
class ROM::SQL::Migration::Migrator
  def create_file(name, version = nil); end
  def generate_version; end
  def migration(&block); end
  def migration_file_content; end
  def pending?; end
  def run(options = nil); end
  extend Anonymous_Module_132
  extend ROM::Initializer
  include Anonymous_Module_131
  include Dry::Initializer::InstanceDSL
  include ROM::Initializer::InstanceMethods
end
module Anonymous_Module_132
  extend Dry::Initializer::ClassDSL
  include Dry::Initializer
end
module Anonymous_Module_131
  def __coercers__; end
  def __defaults__; end
  def __initialize__(connection, **__options__); end
  def connection; end
  def path; end
end
module ROM::SQL::Commands
end
module ROM::SQL::Commands::ErrorWrapper
  def [](*args); end
  def call(*args); end
end
module ROM::SQL::Commands::Transaction
  def transaction(options = nil, &block); end
end
class ROM::SQL::Rollback < Sequel::Rollback
end
module Anonymous_Module_133
  def __coercers__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def associations; end
  def configured_associations; end
  def curry_args; end
  def input; end
  def relation; end
  def result; end
  def source; end
  def type; end
end
class ROM::SQL::Commands::Create < ROM::Commands::Create
  def execute(tuples); end
  def finalize(tuples, *arg1); end
  def insert(tuples); end
  def multi_insert(tuples); end
  def with_input_tuples(tuples); end
  extend Anonymous_Module_134
  extend ROM::Plugins::Command::Schema::ClassInterface
  extend ROM::SQL::Plugin::Associates::ClassMethods
  include Anonymous_Module_133
  include ROM::Plugins::Command::Schema
  include ROM::SQL::Commands::ErrorWrapper
  include ROM::SQL::Commands::Transaction
  include ROM::SQL::Plugin::Associates
  include ROM::SQL::Plugin::Associates::InstanceMethods
end
module Anonymous_Module_134
  def associations(value = nil); end
  def inherited(klass); end
end
module Anonymous_Module_135
  def __coercers__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def associations; end
  def configured_associations; end
  def curry_args; end
  def input; end
  def relation; end
  def result; end
  def source; end
  def type; end
end
class ROM::SQL::Commands::Update < ROM::Commands::Update
  def execute(tuple); end
  def finalize(tuples, *arg1); end
  def primary_key; end
  def update(tuple); end
  def with_input_tuples(tuples); end
  extend Anonymous_Module_136
  extend ROM::Plugins::Command::Schema::ClassInterface
  extend ROM::SQL::Plugin::Associates::ClassMethods
  include Anonymous_Module_135
  include ROM::Plugins::Command::Schema
  include ROM::SQL::Commands::ErrorWrapper
  include ROM::SQL::Commands::Transaction
  include ROM::SQL::Plugin::Associates
  include ROM::SQL::Plugin::Associates::InstanceMethods
end
module Anonymous_Module_136
  def associations(value = nil); end
  def inherited(klass); end
end
module Anonymous_Module_137
  def __coercers__; end
  def __defaults__; end
  def __initialize__(relation, **__options__); end
  def curry_args; end
  def input; end
  def relation; end
  def result; end
  def source; end
  def type; end
end
class ROM::SQL::Commands::Delete < ROM::Commands::Delete
  def execute; end
  include Anonymous_Module_137
  include ROM::SQL::Commands::ErrorWrapper
  include ROM::SQL::Commands::Transaction
end
class ROM::SQL::Transaction < ROM::Transaction
  def connection; end
  def initialize(connection); end
  def run(opts = nil); end
end
class ROM::SQL::Gateway < ROM::Gateway
  def [](name); end
  def connect(uri, *args); end
  def create_table(*args, &block); end
  def dataset(name); end
  def dataset?(name); end
  def disconnect; end
  def drop_table(*args, &block); end
  def extend_command_class(klass, dataset); end
  def initialize(uri, options = nil); end
  def load_extensions(exts); end
  def logger; end
  def options; end
  def schema; end
  def self.instance; end
  def self.instance=(arg0); end
  def transaction_runner(_); end
  def use_logger(logger); end
  include Dry::Core::Constants
  include ROM::SQL::Migration
end
module ROM::SQL::Types::SQLite
end
class Anonymous_ROM_SQL_Schema_Inferrer_138 < ROM::SQL::Schema::Inferrer
end
class ROM::SQL::Schema::SqliteInferrer < Anonymous_ROM_SQL_Schema_Inferrer_138
  def map_type(_, db_type, **_kw); end
end
