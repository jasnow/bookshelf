# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/hanami-assets/all/hanami-assets.rbi
#
# hanami-assets-1.3.2
module Hanami
end
module Hanami::Assets
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure(&blk); end
  def self.deploy; end
  def self.dupe; end
  def self.duplicate(_mod, &blk); end
  def self.duplicates; end
  def self.load!; end
  def self.precompile(configurations); end
  def self.sources; end
  def self.synchronize(&blk); end
  extend Hanami::Utils::ClassAttribute::ClassMethods
  include Hanami::Utils::ClassAttribute
end
class Hanami::Assets::MissingManifestFileError < Hanami::Assets::Error
  def initialize(path); end
end
class Hanami::Assets::MissingManifestAssetError < Hanami::Assets::Error
  def initialize(asset, manifest_path); end
end
module Hanami::Assets::Config
end
class Hanami::Assets::Config::NullManifest < Hanami::Utils::BasicObject
  def initialize(configuration); end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
end
class Hanami::Assets::Config::Manifest
  def initialize(assets, manifest_path); end
  def resolve(asset); end
  def subresource_integrity_values(path); end
  def target(path); end
end
class Hanami::Assets::Config::Sources < Hanami::Utils::LoadPaths
  def files(name = nil); end
  def find(filename); end
  def initialize(root); end
  def map; end
  def realpath(path); end
  def root=(arg0); end
end
class Hanami::Assets::Configuration
  def asset_path(source); end
  def asset_url(source); end
  def base_directories; end
  def cdn(value = nil); end
  def cdn=(arg0); end
  def compile(value = nil); end
  def compile=(arg0); end
  def compile_path(source); end
  def crossorigin?(source); end
  def css_compressor; end
  def destination_directory; end
  def duplicate; end
  def files; end
  def find(file); end
  def fingerprint(value = nil); end
  def host(value = nil); end
  def host=(arg0); end
  def initialize(&blk); end
  def javascript_compressor(value = nil); end
  def javascript_compressor=(arg0); end
  def js_compressor; end
  def load!; end
  def manifest(value = nil); end
  def manifest=(arg0); end
  def manifest_path; end
  def nested(value = nil); end
  def nested=(arg0); end
  def port(value = nil); end
  def port=(arg0); end
  def prefix(value = nil); end
  def prefix=(arg0); end
  def public_directory(value = nil); end
  def public_directory=(arg0); end
  def public_manifest; end
  def reset!; end
  def root(value = nil); end
  def root=(arg0); end
  def scheme(value = nil); end
  def scheme=(arg0); end
  def self.for(base); end
  def source(file); end
  def sources; end
  def sources=(arg0); end
  def stylesheet_compressor(value = nil); end
  def stylesheet_compressor=(arg0); end
  def subresource_integrity(*values); end
  def subresource_integrity=(arg0); end
  def subresource_integrity_algorithms; end
  def subresource_integrity_value(source); end
  def url_port; end
end
class Hanami::Assets::Config::GlobalSources < Hanami::Utils::LoadPaths
  def <<(*paths); end
  def push(*paths); end
  def sync_configuration; end
  def sync_duplicated_frameworks; end
end
module Hanami::Assets::Helpers
  def _absolute_url(source); end
  def _absolute_url?(source); end
  def _append_extension?(source, ext); end
  def _asset_url(source, push:, as:); end
  def _crossorigin?(source); end
  def _push_promise(url, as: nil); end
  def _relative_url(source); end
  def _safe_tags(*sources); end
  def _source_options(src, options, as:, &_blk); end
  def _subresource_integrity?; end
  def _subresource_integrity_value(source, ext); end
  def _typed_asset_path(source, ext, push: nil, as: nil); end
  def asset_path(source, push: nil, as: nil); end
  def asset_url(source, push: nil, as: nil); end
  def audio(source = nil, options = nil, &blk); end
  def favicon(source = nil, options = nil); end
  def image(source, options = nil); end
  def javascript(*sources, push: nil, **options); end
  def self.included(base); end
  def stylesheet(*sources, push: nil, **options); end
  def video(source = nil, options = nil, &blk); end
  include Hanami::Helpers::HtmlHelper
end
class Hanami::Assets::Error < StandardError
end
class Hanami::Assets::MissingAsset < Hanami::Assets::Error
  def initialize(name, sources); end
end
class Hanami::Assets::UnknownAssetEngine < Hanami::Assets::Error
  def initialize(source); end
end
class Hanami::Assets::Compiler
  def absolute_destination_name; end
  def cache!; end
  def cache; end
  def compile!; end
  def compile; end
  def compile?; end
  def copy!; end
  def dependencies; end
  def destination; end
  def destination_name; end
  def destination_path; end
  def exist?; end
  def initialize(configuration, name); end
  def load_paths; end
  def modified?; end
  def relative_destination_name(name: nil, add_prefix: nil); end
  def renderer; end
  def self.cache; end
  def self.compile(configuration, name); end
  def self.eligible?(_name); end
  def self.fabricate(configuration, name); end
  def self.inherited(subclass); end
  def self.subclasses; end
  def self.subclasses=(arg0); end
  def source; end
  def write; end
  extend Hanami::Utils::ClassAttribute::ClassMethods
  include Hanami::Utils::ClassAttribute
end
